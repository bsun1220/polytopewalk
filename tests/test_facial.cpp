#include "utils/FullWalkRun.hpp"
#include <cstring>


int main(){
    int values [] = {1,   1,   1,  -1,  -1,  -1,  -1,   1,  -1,  -1,  -1,  -1,   1,
         1,   1,   1,   1,   1,   1,   1,  -1,   1,   1,   1,   1,   1,
         1,   1,   1,   1,   1,   1,   1,   1,  -1,  -1,   1,   1,   1,
         1,   1,  -1,  -1,   1,  -1,  -1,   1,   1,   1,   1,   1,   1,
         1,   1,   1,   1,   1,   1,  -1,  37,  47,  45,  55,  45,   1,
         1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
         1,   1,  -1,  -1,  -1,   1,   1,   1,   1,   1,   1,   1,   1,
         1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
         2,   2,   1,   2,   1,   1,   1,   1,   1,   1,   1,   1,   1,
         2,   2,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
         1,   1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   1,   1,
         1,   1,   1,  -1,  -1,   1,   1,   1,   1,   1,   1,   1,   1,
         1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,  -2,
        -1,  -1,  -1,  -1,  -1,  -1,   1,   1,  -1,   1,   1,  -2,  -1,
        -1,  -1,  -1,  -1,  -1,   1,   1,  -1,   1,   1,  -2,  -1,  -1,
        -1,  -1,  -1,  -1,   1,   1,  -1,   1,   1,   1,   1,   1,   1,
        -1,  -1,  -1,   1,   1,   1,   2,   2,   1,   1,   1,  -1,  -1,
        -1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,  -1,  -1,
        -1,   1,   1,   1,   1,  -1,   1,   1,   1,   1,   1,   1,   1,
         1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
        -1,  -1,  -1,  -1,  -1,  -2,  -2,  -1,  -2,   1,   1,  -1,  -1,
        -1,  -1,  -1,  -2,  -2,  -1,  -2,   1,   1,  -1,  -1,  -1,  -1,
        -1,  -2,  -2,  -1,  -2,   1,   1,   1,   1,   1,   1,   1,   1,
         1,   1,   1,   1,   2,  -1,  -1,  -1,   1,   1,   1,   1,   1,
         1,  -1,  -1,   1,   1,   1, -10,   4,  -4, -11, -65, -28,  10,
        -1,  -1,  -1,  -1,  -1,  -1,  -1,   1,   1,   1,   1,   1,   1,
        -1,   1,   1,   1,   1,   1,   1,  -1,  -1,  -1,  -1,  16,  21,
        30,  35,  24,   1,  -1,  -1,  -1,  -1,   1,  -1,   1,  -1,  -1,
        -1,  -1,   1,  -1,  -3,  -3,  -2,  -2,  -2,  -1,  -2,  -2,  -2,
         2,   2,   2,   6,   7,  -3,  -3,   1,   2,   2,   2,   2,   2,
         6,   5,   3,   1,   1,   1,   1,   1,   1,   1,   1,  -1,  -1,
        -1,   1,   1,   1,  -1,  -1,  -1,   1,   1,   1,   1,   1,   1,
         1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
         1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
         1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
         1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
         1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
         1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
         1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
         1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
         1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
         1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
         1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
         1};
    
    int rows [] = {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,
         1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   3,   3,
         3,   4,   4,   4,   4,   4,   4,   4,   4,   4,   5,   5,   5,
         5,   5,   5,   5,   5,   5,   5,   6,   6,   6,   6,   7,   7,
         7,   7,   8,   8,   8,   8,   9,   9,   9,   9,   9,   9,  10,
        10,  10,  10,  11,  11,  11,  11,  12,  12,  12,  12,  13,  13,
        13,  13,  13,  13,  13,  13,  13,  14,  14,  14,  14,  15,  15,
        15,  15,  16,  16,  16,  16,  17,  17,  17,  17,  18,  18,  18,
        18,  18,  19,  19,  19,  19,  20,  20,  20,  21,  21,  21,  21,
        21,  21,  22,  22,  23,  23,  23,  24,  25,  25,  26,  26,  26,
        26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,
        27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,
        27,  27,  27,  28,  28,  28,  29,  29,  29,  29,  29,  29,  30,
        30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,
        31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,
        32,  32,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,
        33,  33,  33,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,
        34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,
        34,  35,  35,  35,  36,  36,  36,  36,  36,  37,  37,  37,  37,
        38,  38,  38,  38,  39,  39,  39,  39,  39,  40,  40,  40,  41,
        41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  42,  42,  42,
        42,  42,  42,  42,  42,  42,  42,  42,  43,  43,  43,  43,  43,
        43,  43,  43,  43,  43,  43,  44,  44,  44,  44,  45,  45,  45,
        45,  45,  45,  45,  45,  45,  45,  45,  45,  46,  46,  46,  46,
        46,  46,  46,  47,  47,  47,  48,  48,  48,  48,  48,  48,  48,
        49,  49,  49,  49,  49,  49,  49,  49,  49,  49,  49,  49,  49,
        49,  49,  49,  49,  49,  49,  49,  49,  49,  49,  50,  50,  50,
        50,  50,  50,  51,  51,  51,  51,  51,  51,  51,  52,  52,  52,
        52,  52,  52,  52,  53,  53,  53,  53,  53,  53,  53,  53,  53,
        53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,
        53,  53,  53,  53,  53,  54,  54,  54,  54,  54,  54,  54,  54,
        54,  54,  54,  54,  54,  54,  54,  54,  54,  54,  54,  54,  54,
        54,  54,  54,  54,  54,  55,  55,  55,  56,  56,  57,  57,  58,
        58,  59,  59,  60,  60,  61,  61,  62,  62,  63,  63,  64,  64,
        65,  65,  66,  66,  67,  67,  68,  68,  69,  69,  70,  70,  71,
        71,  72,  72,  73,  73,  74,  74,  75,  75,  76,  76,  77,  77,
        78,  78,  79,  79,  80,  80,  81,  81,  82,  82,  83,  83,  84,
        84,  85,  85,  86,  86,  87,  87,  88,  88,  89,  89,  90,  90,
        91,  91,  92,  92,  93,  93,  94,  94,  95,  95,  96,  96,  97,
        97,  98,  98,  99,  99, 100, 100, 101, 101, 102, 102, 103, 103,
       104, 104, 105, 105, 106, 106, 107, 107, 108, 108, 109, 109, 110,
       110, 111, 111, 112, 112, 113, 113, 114, 114, 115, 115, 116, 116,
       117, 117, 118, 118, 119, 119, 120, 120, 121, 121, 122, 122, 123,
       123};
    
    int cols [] = {0,  41,  42,  43,  89,  90,  91,  96, 101, 102, 117, 118,  84,
        85,  98,  99, 124,   1,  84,  85,  94,  98,  99, 124,   2,  41,
        42,   3,  41,  42,  44, 119, 120, 121, 132, 136,   4,  47,  48,
        49,  89, 101, 102, 109, 117, 118,   5,  53,  54,  55,   6,  56,
        57,  58,   7,  59,  60,  61,  83,  84,  85,  98,  99, 124,   8,
        62,  63,  64,   9,  65,  66,  67,  10,  68,  69,  70,  11,  71,
        72,  74,  89,  90,  91,  96,  97,  12,  77,  78,  79,  13,  80,
        81,  82,  14,  73,  75,  76,  15,  86,  87,  88,  16, 100, 101,
       116, 117,  17,  89,  90,  91,  18,  94,  95,  19,  98,  99, 112,
       114, 115,  20, 132,  21, 102, 118, 136,  22,  92,  23, 101, 102,
       117, 118,  84,  85,  89,  90,  91,  92,  93,  98,  99, 100, 101,
       102, 103, 104, 107, 108, 112, 114, 115, 116, 117, 118, 122, 125,
       126, 132, 136,  24,  96,  97,  25,  44,  47,  71, 123, 131,  50,
        53,  56,  59,  62,  65,  68,  73,  77,  80,  86, 100,  51,  54,
        57,  60,  63,  66,  69,  75,  78,  81,  87, 101,  52,  55,  58,
        61,  64,  67,  70,  76,  79,  82,  88, 102,  26,  45,  84,  98,
       100, 101, 102, 103, 107, 111, 112, 114,  27,  45,  46, 100, 101,
       102, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117,
       118, 107, 108, 127,  28,  95, 107, 108, 127,  29,  48,  72, 133,
        30, 109, 110, 111,  45,  46, 114, 115, 128,  31, 112, 113,  50,
        56,  59,  62,  65,  68,  73,  77,  80,  86, 116,  51,  57,  60,
        63,  66,  69,  75,  78,  81,  87, 117,  52,  58,  61,  64,  67,
        70,  76,  79,  82,  88, 118,  32, 119, 120, 121,  33,  46,  85,
        99, 108, 110, 113, 115, 116, 117, 118, 122,  34,  97, 119, 120,
       123, 132, 136,  35, 105, 135,  44,  47,  71, 123, 129, 130, 131,
        49,  74,  89,  90,  91,  92,  93,  94,  98,  99, 100, 101, 102,
       106, 112, 114, 115, 116, 117, 118, 132, 136, 137,  36,  45,  46,
       114, 115, 128,  37,  44,  47,  71, 123, 129, 131,  38,  44,  47,
        71, 123, 130, 131,  84,  85,  89,  90,  91,  92,  93,  98,  99,
       100, 101, 102, 103, 104, 107, 108, 112, 114, 115, 116, 117, 118,
       122, 125, 126, 132, 136,  39,  41,  42,  44,  96,  97, 100, 101,
       102, 109, 110, 111, 116, 117, 118, 119, 120, 121, 123, 131, 132,
       133, 134, 135, 136, 137,  40,  51,  52,  36, 138,  43, 139,  44,
       140,  47, 141,  49, 142,  50, 143,  51, 144,  52, 145,  53, 146,
        54, 147,  55, 148,  56, 149,  57, 150,  58, 151,  59, 152,  60,
       153,  61, 154,  62, 155,  63, 156,  64, 157,  65, 158,  66, 159,
        67, 160,  68, 161,  69, 162,  70, 163,  71, 164,  73, 165,  74,
       166,  75, 167,  76, 168,  77, 169,  78, 170,  79, 171,  80, 172,
        81, 173,  82, 174,  83, 175,  84, 176,  85, 177,  86, 178,  87,
       179,  88, 180,  89, 181,  90, 182,  91, 183,  92, 184,  93, 185,
        94, 186,  95, 187,  98, 188,  99, 189, 100, 190, 101, 191, 102,
       192, 106, 193, 107, 194, 108, 195, 116, 196, 117, 197, 118, 198,
       123, 199, 129, 200, 130, 201, 131, 202, 132, 203, 136, 204, 137,
       205};
    
    int b_values [] = { 0,    52,    22,    23,     0,     0,   108,    50,    13,
        2366,   200,   265,   300,     0,    31,    60,   134,    34,
         413,    41,    15,    20,    13,   440,     0,    16,   290,
         524,     3,     9,     0,     0,     0,     0,     0,    43,
          34,    15,    19,    44,     6,     0,     0,     0,    13,
           0,     0,    31,     0,     2,  1080,     0,     0,  1231,
           0,   107, 10000, 10000, 10000, 10000, 10000, 10000, 10000,
       10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000,
       10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000,
       10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000,
       10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000,
       10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000,
       10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000,
       10000, 10000, 10000, 10000, 10000, 10000, 10000};

    SparseMatrixXd A (124, 206);
    vector<T> indices;
    for(int i = 0; i < 560; i++){
        indices.push_back(T(rows[i], cols[i], values[i]));
    }
    A.setFromTriplets(indices.begin(), indices.end());

    VectorXd b = VectorXd::Zero(124);
    for(int i = 0; i < 124; i++){
        b.coeffRef(i) = b_values[i]; 
    }

    FacialReduction fr;

    fr.reduce(A, b, 206, false);
    
}
